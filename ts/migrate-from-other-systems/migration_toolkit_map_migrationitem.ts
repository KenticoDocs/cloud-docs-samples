import {
  MigrationElementModels,
  MigrationElements,
  MigrationItem,
  elementsBuilder,
} from "@kontent-ai-consulting/migration-toolkit";

// Define the structure of your Kontent.ai content type
interface MovieModel extends MigrationElements {
  title: MigrationElementModels.TextElement;
  plot: MigrationElementModels.RichTextElement;
  length: MigrationElementModels.NumberElement;
  category: MigrationElementModels.MultipleChoiceElement;
  poster: MigrationElementModels.AssetElement;
}

const migrationItems: MigrationItem[] = [];

const movie: MigrationItem<MovieModel> = {
  system: {
    name: "Warrior",
    // You need to create a unique codename formatted according to https://kontent.ai/learn/docs/apis/openapi/management-api-v2/#section/Rules-for-codenames
    codename: "warrior",
    collection: { codename: "default", },
    // Map your source language to the language codename in Kontent.ai
    language: { codename: "default", },
    type: { codename: "movie", },
    workflow: { codename: "default", },
    // Tip: You can have the item published during the import
    workflow_step: { codename: "published", },
  },
  elements: {
    title: elementsBuilder.textElement({ value: "Warrior" }),
    length: elementsBuilder.numberElement({ value: 140 }),
    category: elementsBuilder.multipleChoiceElement({
      value: [ // References multiple choice options by their codename
        {
          codename: "drama"
        },
        {
          codename: "action"
        },
      ]
    }),
    poster: elementsBuilder.assetElement({
      value: [ // References assets by their codename
        {
          codename: "warrior_teaser",
        },
      ],
    }),
    plot: elementsBuilder.richTextElement({
      value: {
        value: `<h1>Warrior</h1><p>...</p>`,
        components: [],
      },
    }),
    releasecategory: elementsBuilder.taxonomyElement({
      value: [ // References taxonomy terms by their codename
        {
          codename: "global_release",
        },
      ],
    }),
    released: elementsBuilder.dateTimeElement({
      value: "2011-09-09T00:00:00Z",
    }),
    seoname: elementsBuilder.urlSlugElement({
      value: {
        mode: "autogenerated",
        value: "",
      },
    }),
    stars: elementsBuilder.linkedItemsElement({
      value: [ // References content items by their codename
        {
          codename: "tom_hardy",
        },
      ],
    }),
  },
};

migrationItems.push(movie);