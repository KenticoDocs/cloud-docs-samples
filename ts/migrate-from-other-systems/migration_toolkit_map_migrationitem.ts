import {
  MigrationElementModels,
  MigrationElements,
  MigrationItem,
  elementsBuilder,
} from "@kontent-ai-consulting/migration-toolkit";

// Define the structure of your Kontent.ai content type
interface MovieType extends MigrationElements {
  title: MigrationElementModels.TextElement;
  plot: MigrationElementModels.RichTextElement;
  length: MigrationElementModels.NumberElement;
  category: MigrationElementModels.MultipleChoiceElement;
  poster: MigrationElementModels.AssetElement;
}

const movie: MigrationItem<MovieType> = {
  system: {
    name: "Warrior",
    // Ensure a unique codename. Check https://kontent.ai/learn/rules-for-codenames
    codename: "warrior",
    collection: { codename: "default" },
    // Map your source language to the language codename in Kontent.ai
    language: { codename: "default" },
    type: { codename: "movie" },
    workflow: { codename: "default" },
  },
  // Tip: You can migrate up to 2 versions - 1 published and one in draft state. This is optional and typically
  // you only need to migrate a single version of your content
  versions: [
    {
      workflow_step: {
        // Tip: You can have the item published during the import or use any other workflow step
        codename: "published",
      },
      elements: {
        title: elementsBuilder.textElement({ value: "Warrior" }),
        length: elementsBuilder.numberElement({ value: 140 }),
        category: elementsBuilder.multipleChoiceElement({
          value: [
            // Reference multiple choice options by their codenames
            {
              codename: "drama",
            },
            {
              codename: "action",
            },
          ],
        }),
        poster: elementsBuilder.assetElement({
          value: [
            // Reference assets by their codenames
            {
              codename: "warrior_teaser",
            },
          ],
        }),
        plot: elementsBuilder.richTextElement({
          value: {
            // Check supported HTML elements at https://kontent.ai/learn/rich-text-in-mapi
            value: `<h1>Warrior</h1><p>...</p>`,
            components: [],
          },
        }),
        releasecategory: elementsBuilder.taxonomyElement({
          value: [
            // Reference taxonomy terms by their codenames
            {
              codename: "global_release",
            },
          ],
        }),
        released: elementsBuilder.dateTimeElement({
          value: "2011-09-09T00:00:00Z",
        }),
        seoname: elementsBuilder.urlSlugElement({
          value: {
            mode: "autogenerated",
            value: "", // Empty string because 'value' is autogenerated based on the dependent text element
          },
        }),
        stars: elementsBuilder.linkedItemsElement({
          value: [
            // Reference content items by their codenames
            {
              codename: "tom_hardy",
            },
          ],
        }),
      },
    },
  ],
};

const migrationItems: MigrationItem[] = [movie];
